burnouts mode
src/
├─ firebase.js.txt
├─ BurnoutsSelection.jsx.txt
├─ BurnoutsApp.jsx.txt
├─ logic/
│   ├─ burnoutsHelpers.js.txt
│   ├─ PlayerMediaHandler.js.txt
│   └─ MediaPose.js.txt

// src/firebase.js
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";
import { getAuth } from "firebase/auth";
import { getAnalytics } from "firebase/analytics";

const firebaseConfig = {
  apiKey: "AIzaSyB68ZwHdbSKc_KmYu_UBEPdde6_1giTvy4",
  authDomain: "rivalis-fitness-reimagined.firebaseapp.com",
  projectId: "rivalis-fitness-reimagined",
  storageBucket: "rivalis-fitness-reimagined.firebasestorage.app",
  messagingSenderId: "87398106759",
  appId: "1:87398106759:web:5048a04e7130f8a027da22",
  measurementId: "G-18CRL1DDT8",
};

const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);
export const analytics = getAnalytics(app);

import { useNavigate } from "react-router-dom";

export default function BurnoutsSelection() {
  const navigate = useNavigate();

  const selectMuscleGroup = (group) => {
    navigate(`/burnouts/${group}`);
  };

  const buttons = [
    { name: "Arms", icon: "/assets/icons/arms.png" },
    { name: "Legs", icon: "/assets/icons/legs.png" },
    { name: "Core", icon: "/assets/icons/core.png" },
    { name: "Cardio", icon: "/assets/icons/cardio.png" },
  ];

  return (
    <div className="selection-container">
      <h1>Select Muscle Group</h1>
      <div className="buttons-grid">
        {buttons.map((btn) => (
          <div key={btn.name} className="button-card" onClick={() => selectMuscleGroup(btn.name)}>
            <img src={btn.icon} alt={btn.name} className="button-icon" />
            <span>{btn.name}</span>
          </div>
        ))}
      </div>
    </div>
  );
}

Muscle Group	File Name	Description / Style

Arms	arms.png	Bicep flex silhouette, red accent, flat style
Legs	legs.png	Squat silhouette, red accent, flat style
Core	core.png	Abs crunch silhouette, red accent, flat style
Cardio	cardio.png	Jumping jack silhouette, red accent, flat style

// src/BurnoutsApp.jsx
import { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { auth, db } from "./firebase";
import { onAuthStateChanged } from "firebase/auth";
import { getDoc, doc } from "firebase/firestore";
import { shuffleDeck, updateUserStats, finalizeSession } from "./logic/burnoutsHelpers";

export default function BurnoutsApp() {
  const { muscleGroup } = useParams(); // Selected on BurnoutsSelection page
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  // Require login from Rivalis Hub
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      if (currentUser) {
        setUser(currentUser);
        setLoading(false);
      } else {
        window.location.href = "https://rivalishub.netlify.app";
      }
    });
    return () => unsubscribe();
  }, []);

  if (loading) return <div>Loading...</div>;
  if (!user) return null;

  return <BurnoutsSession userId={user.uid} muscleGroup={muscleGroup} />;
}

// --- Dicebear Avatar Component ---
function BurnoutsAvatar({ userId }) {
  const [avatarUrl, setAvatarUrl] = useState(null);

  useEffect(() => {
    const fetchAvatar = async () => {
      const docSnap = await getDoc(doc(db, "users", userId));
      if (docSnap.exists()) {
        setAvatarUrl(docSnap.data().avatarUrl);
      }
    };
    fetchAvatar();
  }, [userId]);

  if (!avatarUrl) return <div>Loading Avatar...</div>;

  return (
    <div className="avatar-container">
      <img src={avatarUrl} alt="User Avatar" className="burnouts-avatar" />
    </div>
  );
}

// --- Main Burnouts Session ---
function BurnoutsSession({ userId, muscleGroup }) {
  const [deck, setDeck] = useState(shuffleDeck(muscleGroup));
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [totalReps, setTotalReps] = useState(0);
  const [diceEarned, setDiceEarned] = useState(0);
  const [multiplier, setMultiplier] = useState(1);
  const [sessionActive, setSessionActive] = useState(true);

  const completeCard = (reps) => {
    const adjustedReps = reps * multiplier;
    setTotalReps(prev => prev + adjustedReps);

    if ((totalReps + adjustedReps) % (30 * multiplier) === 0) {
      setDiceEarned(prev => prev + 1 * multiplier);
    }

    updateUserStats(userId, totalReps + adjustedReps, diceEarned, muscleGroup);

    // Auto-flip after 5 seconds
    setTimeout(() => setCurrentCardIndex(prev => prev + 1), 5000);
  };

  const endSession = () => {
    setSessionActive(false);
    finalizeSession(userId, totalReps, diceEarned, muscleGroup);

    alert(`Session Complete!\nReps: ${totalReps}\nCards: ${currentCardIndex + 1}\nDice: ${diceEarned}`);
    setTimeout(() => {
      window.location.href = "https://rivalishub.netlify.app";
    }, 3000);
  };

  const replayDeck = () => {
    setMultiplier(2);
    setCurrentCardIndex(0);
    setDeck(shuffleDeck(muscleGroup));
    setSessionActive(true);
  };

  const currentCard = deck[currentCardIndex];

  return (
    <div className="burnouts-container">
      <BurnoutsAvatar userId={userId} />

      <div className="deck-view">
        {currentCardIndex < deck.length && currentCard ? (
          <div className="card">
            <h2>{currentCard.exercise}</h2>
            <p>Reps: {currentCard.reps * multiplier}</p>
            <button onClick={() => completeCard(currentCard.reps)}>Complete Card</button>
          </div>
        ) : (
          <div className="session-end">
            <h2>Deck Complete!</h2>
            <button onClick={replayDeck}>Replay x2 Rewards</button>
            <button onClick={endSession}>End Session</button>
          </div>
        )}
      </div>

      <div className="stats-panel">
        <p>Cards Completed: {currentCardIndex}</p>
        <p>Total Reps: {totalReps}</p>
        <p>Dice Earned: {diceEarned}</p>
      </div>
    </div>
  );
}

// src/logic/burnoutsHelpers.js
import { db } from "../firebase";
import { doc, updateDoc, arrayUnion, getDoc, setDoc } from "firebase/firestore";

// --- Deck Shuffling ---
export function shuffleDeck(muscleGroup) {
  const exercisesMap = {
    Arms: ["Push-Ups", "Plank Up-Downs", "Tricep Dips", "Shoulder Taps"],
    Legs: ["Squats", "Lunges", "Glute Bridges", "Calf Raises"],
    Core: ["Crunches", "Plank Hold", "Russian Twists", "Leg Raises"],
    Cardio: ["Jumping Jacks", "High Knees", "Burpees", "Mountain Climbers"],
  };

  const suits = ["Spades", "Hearts", "Diamonds", "Clubs"];
  const faceValues = [2,3,4,5,6,7,8,9,10,"J","Q","K","A"];
  let deck = [];

  suits.forEach((suit) => {
    faceValues.forEach((face) => {
      const reps = typeof face === "number" ? face : face === "J" ? 11 : face === "Q" ? 12 : face === "K" ? 13 : 14;
      const exerciseList = exercisesMap[muscleGroup] || exercisesMap["Arms"];
      const exercise = exerciseList[Math.floor(Math.random() * exerciseList.length)];
      deck.push({ suit, face, reps, exercise });
    });
  });

  for (let i = deck.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [deck[i], deck[j]] = [deck[j], deck[i]];
  }

  return deck;
}

// --- Update User Stats & Leaderboard ---
export async function updateUserStats(userId, totalReps, diceEarned, muscleGroup) {
  const userRef = doc(db, "users", userId);
  const userSnap = await getDoc(userRef);

  if (userSnap.exists()) {
    await updateDoc(userRef, {
      totalReps,
      diceBalance: diceEarned,
      [`leaderboard.${muscleGroup}`]: arrayUnion(totalReps),
    });
  } else {
    await setDoc(userRef, {
      totalReps,
      diceBalance: diceEarned,
      leaderboard: { [muscleGroup]: [totalReps] },
    });
  }
}

// --- Finalize Session & Sync Leaderboard ---
export async function finalizeSession(userId, totalReps, diceEarned, muscleGroup) {
  const userRef = doc(db, "users", userId);
  const userSnap = await getDoc(userRef);

  if (userSnap.exists()) {
    await updateDoc(userRef, {
      [`leaderboard.${muscleGroup}`]: arrayUnion(totalReps),
    });
  } else {

// src/BurnoutsApp.jsx
import { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { auth, db } from "./firebase";
import { onAuthStateChanged } from "firebase/auth";
import { getDoc, doc } from "firebase/firestore";
import PlayerMediaHandler from "./logic/PlayerMediaHandler";
import { shuffleDeck, updateUserStats, finalizeSession } from "./logic/burnoutsHelpers";

export default function BurnoutsApp() {
  const { muscleGroup } = useParams();
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [poseData, setPoseData] = useState(null);

  // Require login from Rivalis Hub
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      if (currentUser) {
        setUser(currentUser);
        setLoading(false);
      } else {
        window.location.href = "https://rivalishub.netlify.app";
      }
    });
    return () => unsubscribe();
  }, []);

  if (loading) return <div>Loading...</div>;
  if (!user) return null;

  return <BurnoutsSession userId={user.uid} muscleGroup={muscleGroup} poseData={poseData} setPoseData={setPoseData} />;
}

// --- Main Burnouts Session ---
function BurnoutsSession({ userId, muscleGroup, poseData, setPoseData }) {
  const [deck, setDeck] = useState(shuffleDeck(muscleGroup));
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [totalReps, setTotalReps] = useState(0);
  const [diceEarned, setDiceEarned] = useState(0);
  const [multiplier, setMultiplier] = useState(1);
  const [sessionActive, setSessionActive] = useState(true);
  const [avatarUrl, setAvatarUrl] = useState(null);

  // Fetch Dicebear avatar from Firestore
  useEffect(() => {
    const fetchAvatar = async () => {
      const docSnap = await getDoc(doc(db, "users", userId));
      if (docSnap.exists()) setAvatarUrl(docSnap.data().avatarUrl);
    };
    fetchAvatar();
  }, [userId]);

  const completeCard = (reps) => {
    const adjustedReps = reps * multiplier;
    setTotalReps(prev => prev + adjustedReps);

    if ((totalReps + adjustedReps) % (30 * multiplier) === 0) {
      setDiceEarned(prev => prev + 1 * multiplier);
    }

    updateUserStats(userId, totalReps + adjustedReps, diceEarned, muscleGroup);

    // Auto-flip after 5 seconds
    setTimeout(() => setCurrentCardIndex(prev => prev + 1), 5000);
  };

  const endSession = () => {
    setSessionActive(false);
    finalizeSession(userId, totalReps, diceEarned, muscleGroup);

    alert(`Session Complete!\nReps: ${totalReps}\nCards: ${currentCardIndex + 1}\nDice: ${diceEarned}`);
    setTimeout(() => window.location.href = "https://rivalishub.netlify.app", 3000);
  };

  const replayDeck = () => {
    setMultiplier(2);
    setCurrentCardIndex(0);
    setDeck(shuffleDeck(muscleGroup));
    setSessionActive(true);
  };

  const currentCard = deck[currentCardIndex];

  return (
    <div className="burnouts-container">
      <PlayerMediaHandler userId={userId} onPoseUpdate={setPoseData} />

      {avatarUrl && (
        <div className="avatar-container">
          <img src={avatarUrl} alt="User Avatar" className="burnouts-avatar" />
        </div>
      )}

      <div className="deck-view">
        {currentCardIndex < deck.length && currentCard ? (
          <div className="card">
            <h2>{currentCard.exercise}</h2>
            <p>Reps: {currentCard.reps * multiplier}</p>
            <button onClick={() => completeCard(currentCard.reps)}>Complete Card</button>
          </div>
        ) : (
          <div className="session-end">
            <h2>Deck Complete!</h2>
            <button onClick={replayDeck}>Replay x2 Rewards</button>
            <button onClick={endSession}>End Session</button>
          </div>
        )}
      </div>

      <div className="stats-panel">
        <p>Cards Completed: {currentCardIndex}</p>
        <p>Total Reps: {totalReps}</p>
        <p>Dice Earned: {diceEarned}</p>
      </div>
    </div>
  );
}

// src/logic/PlayerMediaHandler.js
import { useEffect, useState } from "react";
import { db } from "../firebase";
import { doc, setDoc } from "firebase/firestore";
import * as poseDetection from "@tensorflow-models/pose-detection";
import "@tensorflow/tfjs-backend-webgl";

export default function PlayerMediaHandler({ userId, onPoseUpdate }) {
  const [detector, setDetector] = useState(null);

  useEffect(() => {
    const init = async () => {
      const detectorConfig = { modelType: poseDetection.movenet.modelType.SINGLEPOSE_LIGHTNING };
      const detectorInstance = await poseDetection.createDetector(poseDetection.SupportedModels.MoveNet, detectorConfig);
      setDetector(detectorInstance);
    };
    init();
  }, []);

  useEffect(() => {
    if (!detector) return;

    const video = document.createElement("video");
    video.autoplay = true;
    video.playsInline = true;
    navigator.mediaDevices.getUserMedia({ video: true }).then(stream => video.srcObject = stream);

    const detectPose = async () => {
      if (video.readyState === 4) {
        const poses = await detector.estimatePoses(video);
        if (poses[0]) {
          const poseData = {
            rotationY: poses[0].keypoints[0]?.x / 100,
            positionY: poses[0].keypoints[1]?.y / 200,
            updatedAt: Date.now(),
          };
          onPoseUpdate?.(poseData);

          if (userId) await setDoc(doc(db, "poseData", userId), poseData, { merge: true });
        }
      }
      requestAnimationFrame(detectPose);
    };
    detectPose();
  }, [detector, userId]);

  return null;
}